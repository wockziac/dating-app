// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	core "datingapp/application/core"

	mock "github.com/stretchr/testify/mock"
)

// IUserProfileRepository is an autogenerated mock type for the IUserProfileRepository type
type IUserProfileRepository struct {
	mock.Mock
}

// GetUserProfile provides a mock function with given fields: profileID
func (_m *IUserProfileRepository) GetUserProfile(profileID int) (core.UserProfile, error) {
	ret := _m.Called(profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 core.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (core.UserProfile, error)); ok {
		return rf(profileID)
	}
	if rf, ok := ret.Get(0).(func(int) core.UserProfile); ok {
		r0 = rf(profileID)
	} else {
		r0 = ret.Get(0).(core.UserProfile)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewProfile provides a mock function with given fields: userProfile
func (_m *IUserProfileRepository) InsertNewProfile(userProfile core.UserProfile) (core.UserProfile, error) {
	ret := _m.Called(userProfile)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewProfile")
	}

	var r0 core.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(core.UserProfile) (core.UserProfile, error)); ok {
		return rf(userProfile)
	}
	if rf, ok := ret.Get(0).(func(core.UserProfile) core.UserProfile); ok {
		r0 = rf(userProfile)
	} else {
		r0 = ret.Get(0).(core.UserProfile)
	}

	if rf, ok := ret.Get(1).(func(core.UserProfile) error); ok {
		r1 = rf(userProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserProfileRepository creates a new instance of IUserProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserProfileRepository {
	mock := &IUserProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
