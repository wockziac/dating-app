// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	core "datingapp/application/core"

	mock "github.com/stretchr/testify/mock"
)

// IUserCredentialRepository is an autogenerated mock type for the IUserCredentialRepository type
type IUserCredentialRepository struct {
	mock.Mock
}

// GetUserCredentials provides a mock function with given fields: phoneNumber
func (_m *IUserCredentialRepository) GetUserCredentials(phoneNumber string) (*core.UserCredentials, error) {
	ret := _m.Called(phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCredentials")
	}

	var r0 *core.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*core.UserCredentials, error)); ok {
		return rf(phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *core.UserCredentials); ok {
		r0 = rf(phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUserCredentials provides a mock function with given fields: _a0
func (_m *IUserCredentialRepository) InsertUserCredentials(_a0 core.UserCredentials) (core.UserCredentials, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertUserCredentials")
	}

	var r0 core.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(core.UserCredentials) (core.UserCredentials, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(core.UserCredentials) core.UserCredentials); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(core.UserCredentials)
	}

	if rf, ok := ret.Get(1).(func(core.UserCredentials) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserCredentialRepository creates a new instance of IUserCredentialRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserCredentialRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserCredentialRepository {
	mock := &IUserCredentialRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
